import { type NextRequest, NextResponse } from "next/server"

// Mock database - replace with your actual database
const websites = [
  {
    id: "1",
    name: "My Portfolio",
    description: "Personal portfolio website",
    language: "nextjs",
    hostedUrl: "https://my-portfolio.0xhub.pro",
    npxCommand: "npx @genui/my-portfolio@latest",
    createdAt: new Date().toISOString(),
    lastModified: new Date().toISOString(),
    deploymentStatus: "deployed",
    files: {
      "package.json": {
        type: "file",
        content: JSON.stringify(
          {
            name: "my-portfolio",
            version: "1.0.0",
            private: true,
            scripts: {
              dev: "next dev",
              build: "next build",
              start: "next start",
              lint: "next lint",
            },
            dependencies: {
              next: "^14.0.0",
              react: "^18.0.0",
              "react-dom": "^18.0.0",
              typescript: "^5.0.0",
              tailwindcss: "^3.3.0",
            },
            devDependencies: {
              "@types/node": "^20.0.0",
              "@types/react": "^18.0.0",
              "@types/react-dom": "^18.0.0",
              autoprefixer: "^10.0.0",
              postcss: "^8.0.0",
              eslint: "^8.0.0",
              "eslint-config-next": "^14.0.0",
            },
          },
          null,
          2,
        ),
      },
      app: {
        type: "folder",
        children: {
          "layout.tsx": {
            type: "file",
            content: `import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'My Portfolio',
  description: 'Generated with GenUI - AI-Powered Website Generator',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`,
          },
          "page.tsx": {
            type: "file",
            content: `export default function HomePage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-16">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Welcome to My Portfolio
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Built with GenUI - AI-Powered Website Generator
          </p>
          <div className="bg-white rounded-lg shadow-lg p-8 max-w-2xl mx-auto">
            <h2 className="text-2xl font-semibold mb-4">About Me</h2>
            <p className="text-gray-700">
              This is a sample portfolio website generated by GenUI. 
              Customize this content to showcase your skills and projects.
            </p>
            <div className="mt-6">
              <button className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg mr-4 transition-colors">
                View Projects
              </button>
              <button className="border border-gray-300 hover:bg-gray-50 px-6 py-2 rounded-lg transition-colors">
                Contact Me
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}`,
          },
          "globals.css": {
            type: "file",
            content: `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: system-ui, -apple-system, sans-serif;
}

.gradient-bg {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.card-hover {
  transition: transform 0.2s ease-in-out;
}

.card-hover:hover {
  transform: translateY(-4px);
}`,
          },
        },
      },
      "tailwind.config.js": {
        type: "file",
        content: `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        },
      },
    },
  },
  plugins: [],
}`,
      },
      "next.config.js": {
        type: "file",
        content: `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  images: {
    domains: ['images.unsplash.com'],
  },
}

module.exports = nextConfig`,
      },
      "README.md": {
        type: "file",
        content: `# My Portfolio

Generated with GenUI - AI-Powered Website Generator

## Getting Started

\`\`\`bash
npm install
npm run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Environment Variables

This project uses the following environment variables:

### Required Environment Variables

- \`NEXT_PUBLIC_BASE_URL\` - The base URL of your application (e.g., http://localhost:3000)
- \`NEXT_PUBLIC_API_URL\` - The API endpoint URL (e.g., http://localhost:3000/api)

### Optional Environment Variables

- \`GOOGLE_AI_API_KEY\` - Google AI API key for enhanced features
- \`JWT_SECRET\` - Secret key for JWT token generation
- \`OXAPAY_API_KEY\` - OxaPay API key for payment processing

### Environment Setup

Create a \`.env.local\` file in the root directory:

\`\`\`env
NEXT_PUBLIC_BASE_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3000/api

# Optional: Add your API keys here
# GOOGLE_AI_API_KEY=your_google_ai_api_key
# JWT_SECRET=your_jwt_secret
# OXAPAY_API_KEY=your_oxapay_api_key
\`\`\`

## Features

- ✅ Next.js 14 with App Router
- ✅ TypeScript support
- ✅ Tailwind CSS styling
- ✅ Responsive design
- ✅ SEO optimized
- ✅ Environment variable support
- ✅ Generated with AI

## Deployment

Deploy easily on Vercel, Netlify, or any hosting platform that supports Next.js.

Make sure to set your environment variables in your deployment platform:

### Vercel
1. Go to your project settings
2. Navigate to Environment Variables
3. Add your variables with appropriate values

### Netlify
1. Go to Site settings > Environment variables
2. Add your variables

## Generated by GenUI

This website was generated using GenUI's AI-powered website generator.
Visit [0xhub.pro](https://0xhub.pro) to create your own website.
`,
      },
    },
    dependencies: {
      next: "^14.0.0",
      react: "^18.0.0",
      "react-dom": "^18.0.0",
      typescript: "^5.0.0",
      tailwindcss: "^3.3.0",
    },
    devDependencies: {
      "@types/node": "^20.0.0",
      "@types/react": "^18.0.0",
      "@types/react-dom": "^18.0.0",
      autoprefixer: "^10.0.0",
      postcss: "^8.0.0",
      eslint: "^8.0.0",
      "eslint-config-next": "^14.0.0",
    },
  },
]

export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const websiteId = params.id

    // Find website by ID or create a mock one
    let website = websites.find((w) => w.id === websiteId)

    if (!website) {
      // Create a mock website for demo purposes
      website = {
        id: websiteId,
        name: "Generated Website",
        description: "AI-generated website",
        language: "nextjs",
        hostedUrl: `https://website-${websiteId}.0xhub.pro`,
        npxCommand: `npx @genui/website-${websiteId}@latest`,
        createdAt: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        deploymentStatus: "deployed",
        files: websites[0].files, // Use default structure
        dependencies: websites[0].dependencies,
        devDependencies: websites[0].devDependencies,
      }
    }

    return NextResponse.json({
      success: true,
      website: {
        id: website.id,
        name: website.name,
        description: website.description,
        language: website.language,
        files: website.files,
        dependencies: website.dependencies,
        devDependencies: website.devDependencies,
        hostedUrl: website.hostedUrl,
        npxCommand: website.npxCommand,
      },
    })
  } catch (error) {
    console.error("Website install data error:", error)
    return NextResponse.json({ error: "Failed to get website install data" }, { status: 500 })
  }
}
